generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String          @id @default(cuid())
  name            String?
  email           String?         @unique
  password        String?
  emailVerified   DateTime?
  image           String?
  onboardingState Json?
  accounts        Account[]
  patientProfile  PatientProfile?
  posts           Post[]
  sessions        Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PatientProfile {
  id                       String                   @id @default(cuid())
  userId                   String                   @unique
  dateOfBirth              DateTime?
  sickleCellType           SickleCellType?
  Genotype                 SCDGenotype?
  diagnosisDate            DateTime?
  complications            String[]
  otherMedicalConditions   String[]
  medications              Json[]
  hydroxyureaUsage         Boolean?
  bloodTransfusionHistory  String?
  painManagementStrategies String[]
  occupation               String?
  physicalActivityLevel    CheckLevel?
  dietaryHabits            String[]
  smokingStatus            String?
  alcoholConsumption       String?
  location                 String?
  homeEnvironment          String[]
  travelFrequency          String?
  knownTriggerEvents       TriggerEvent[]
  allergies                String[]
  emergencyContact         Json?
  primaryCarePhysician     String?
  hematologistContact      String?
  sleepPatterns            SleepPattern?
  energyLevels             CheckLevel?
  painLevel                PainLevel?
  moodAssessment           MoodAssessment?
  shortTermGoals           String[]
  longTermGoals            String[]
  communicationPreference  CommunicationPreference?
  clinicalTrialInterest    Boolean?
  dataShareConsent         Boolean?
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
  gender                   Gender?
  healthMetrics            HealthMetric[]
  symptoms                 Symptom[]
  user                     User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model HealthMetric {
  id               String         @id @default(cuid())
  patientProfileId String
  date             DateTime
  painLevel        PainLevel
  medication       String?
  triggerEvent     TriggerEvent?
  notes            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  patientProfile   PatientProfile @relation(fields: [patientProfileId], references: [id], onDelete: Cascade)
}

model Symptom {
  id               String         @id @default(cuid())
  patientProfileId String
  name             String
  severity         Int
  date             DateTime       @default(now())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  patientProfile   PatientProfile @relation(fields: [patientProfileId], references: [id], onDelete: Cascade)
}

enum SickleCellType {
  AA
  AS
  SS
  AC
  SC
}

enum SCDGenotype {
  SCA
  SCT
}

enum TriggerEvent {
  Stress
  Infection
  Dehydration
  Cold
  Heat
  Exercise
  Other
}

enum PainLevel {
  None
  Mild
  Moderate
  Severe
}

enum MoodAssessment {
  Happy
  Sad
  Angry
  Anxious
  Depressed
  Other
}

enum CommunicationPreference {
  Email
  Phone
  SMS
  Other
}

enum SleepPattern {
  Good
  Poor
}

enum CheckLevel {
  High
  Moderate
  Low
}

enum Gender {
  Male
  Female
  Other
}